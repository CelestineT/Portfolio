{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1zf14aKIBBPHVHajKFXL0pS6GRZEWQEmo",
      "authorship_tag": "ABX9TyOqoNzfHqYoEzU9qPFOzDxE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CelestineT/Portfolio/blob/main/Projet%20Data_Churn_Bancaire\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xvUXndyRwqxb",
        "outputId": "4f0cac9d-7f49-42d5-94fa-a73bb589dd3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pa6js2IR3JTB",
        "outputId": "0ff038e8-43b1-43c1-919c-5ac55f42a37d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**INTRODUCTION**  # Prédiction du Churn Client pour une Banque\n",
        "\n",
        "## Contexte\n",
        "Le churn des clients (lorsqu'un client quitte la banque) est un problème crucial pour le secteur bancaire. Retenir les clients existants est souvent moins coûteux que d'en acquérir de nouveaux. Ce projet vise à construire un modèle de machine learning pour prédire quels clients sont susceptibles de quitter la banque.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "MaSDcDw-vG-j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**OBJECTIFS**\n",
        "\n",
        "L'objectif principal de ce projet est de prédire le churn (départ) des clients en utilisant les données disponibles. Le projet se concentrera sur la construction d'un modèle de machine learning capable d'identifier les clients susceptibles de quitter la banque afin de permettre une intervention proactive pour les retenir.\n",
        "\n",
        "1. Analyser les données disponibles sur les clients de la banque.\n",
        "2. Construire un modèle de machine learning pour prédire le churn.\n",
        "3. Interpréter les résultats et fournir des recommandations pour améliorer la rétention des clients.\n"
      ],
      "metadata": {
        "id": "6ybN6xb_vRig"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Étape 1: Préparation et exploration des données\n",
        "\n",
        "1.   Préparation des données\n",
        "\n",
        "Pour commencer, nous avons besoin de comprendre la structure des données, identifier les valeurs manquantes, et explorer les relations entre les différentes variables.\n"
      ],
      "metadata": {
        "id": "FVlmebqqvyr0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Charger le fichier CSV\n",
        "df = pd.read_csv('/content/drive/MyDrive/PROJET DATA CHURN BANCAIRE/Churn_Modelling.csv')\n",
        "\n",
        "# Afficher un aperçu des données\n",
        "print(\"Aperçu des données :\\n\", df.head())\n",
        "\n",
        "# Vérifier les valeurs manquantes par colonne\n",
        "print(\"\\nValeurs manquantes par colonne :\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Remplacer les valeurs manquantes dans 'HasCrCard' et 'IsActiveMember' par la valeur la plus fréquente (mode) si nécessaire\n",
        "if 'HasCrCard' in df.columns:\n",
        "    if df['HasCrCard'].isnull().sum() > 0:\n",
        "        df['HasCrCard'].fillna(df['HasCrCard'].mode()[0], inplace=True)\n",
        "    print(\"\\n'HasCrCard' après remplissage :\")\n",
        "    print(df['HasCrCard'].value_counts())\n",
        "\n",
        "if 'IsActiveMember' in df.columns:\n",
        "    if df['IsActiveMember'].isnull().sum() > 0:\n",
        "        df['IsActiveMember'].fillna(df['IsActiveMember'].mode()[0], inplace=True)\n",
        "    print(\"\\n'IsActiveMember' après remplissage :\")\n",
        "    print(df['IsActiveMember'].value_counts())\n",
        "\n",
        "# Convertir les variables catégorielles en numériques si les colonnes existent\n",
        "if 'Geography' in df.columns and 'Gender' in df.columns:\n",
        "    df = pd.get_dummies(df, columns=['Geography', 'Gender'], drop_first=True)\n",
        "    print(\"\\nColonnes après transformation avec pd.get_dummies :\")\n",
        "    print(df.columns)\n",
        "else:\n",
        "    print(\"\\nErreur : Les colonnes 'Geography' et 'Gender' n'existent pas dans le DataFrame.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ke4ms2u93vcl",
        "outputId": "5ab0affd-8fff-4b26-9b4d-b1cf781004de"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aperçu des données :\n",
            "    RowNumber  CustomerId   Surname  CreditScore Geography  Gender   Age  \\\n",
            "0          1    15634602  Hargrave          619    France  Female  42.0   \n",
            "1          2    15647311      Hill          608     Spain  Female  41.0   \n",
            "2          3    15619304      Onio          502    France  Female  42.0   \n",
            "3          4    15701354      Boni          699    France  Female  39.0   \n",
            "4          5    15737888  Mitchell          850     Spain  Female  43.0   \n",
            "\n",
            "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
            "0       2       0.00              1        1.0             1.0   \n",
            "1       1   83807.86              1        0.0             1.0   \n",
            "2       8  159660.80              3        1.0             0.0   \n",
            "3       1       0.00              2        0.0             0.0   \n",
            "4       2  125510.82              1        NaN             1.0   \n",
            "\n",
            "   EstimatedSalary  Exited  \n",
            "0        101348.88       1  \n",
            "1        112542.58       0  \n",
            "2        113931.57       1  \n",
            "3         93826.63       0  \n",
            "4         79084.10       0  \n",
            "\n",
            "Valeurs manquantes par colonne :\n",
            "RowNumber          0\n",
            "CustomerId         0\n",
            "Surname            0\n",
            "CreditScore        0\n",
            "Geography          1\n",
            "Gender             0\n",
            "Age                1\n",
            "Tenure             0\n",
            "Balance            0\n",
            "NumOfProducts      0\n",
            "HasCrCard          1\n",
            "IsActiveMember     1\n",
            "EstimatedSalary    0\n",
            "Exited             0\n",
            "dtype: int64\n",
            "\n",
            "'HasCrCard' après remplissage :\n",
            "HasCrCard\n",
            "1.0    7057\n",
            "0.0    2945\n",
            "Name: count, dtype: int64\n",
            "\n",
            "'IsActiveMember' après remplissage :\n",
            "IsActiveMember\n",
            "1.0    5151\n",
            "0.0    4851\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Colonnes après transformation avec pd.get_dummies :\n",
            "Index(['RowNumber', 'CustomerId', 'Surname', 'CreditScore', 'Age', 'Tenure',\n",
            "       'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember',\n",
            "       'EstimatedSalary', 'Exited', 'Geography_Germany', 'Geography_Spain',\n",
            "       'Gender_Male'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "uyRhD6epwWhR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "2.   Exploration des données\n",
        "\n",
        "Avant d'entraîner le modèle, il est important de préparer les données en nettoyant les valeurs manquantes, en encodant les variables catégorielles, et en normalisant les données.\n"
      ],
      "metadata": {
        "id": "WD1RFAjsw833"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Distribution de la variable cible\n",
        "plt.figure(figsize=(6,4))\n",
        "sns.countplot(x='Exited', data=df)\n",
        "plt.title('Distribution de la Variable Cible (Exited)')\n",
        "plt.xlabel('Exited')\n",
        "plt.ylabel('Nombre de Clients')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "HBMIj_oL7w6H",
        "outputId": "9d6843b5-c6c3-4fcb-936d-900a192f4f46"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Construction du Modèle\n",
        "\n",
        "Nous avons choisi d'utiliser la Régression Logistique comme modèle de base pour prédire le churn des clients. Ce modèle est simple, interprétable et efficace pour les problèmes de classification binaire.\n"
      ],
      "metadata": {
        "id": "9Hvx0Z1FMvjB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Définir les variables explicatives et la variable cible\n",
        "X = df.drop(['CustomerId', 'Surname', 'RowNumber', 'Exited'], axis=1)\n",
        "y = df['Exited']\n"
      ],
      "metadata": {
        "id": "3ZPVBF_vDKaL"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Vérifier les valeurs manquantes dans X\n",
        "print(\"Valeurs manquantes par colonne :\")\n",
        "print(X.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S-sCrDVMDjTG",
        "outputId": "e2c32171-4af4-4983-87b2-b8c9e406362b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valeurs manquantes par colonne :\n",
            "CreditScore          0\n",
            "Age                  1\n",
            "Tenure               0\n",
            "Balance              0\n",
            "NumOfProducts        0\n",
            "HasCrCard            0\n",
            "IsActiveMember       0\n",
            "EstimatedSalary      0\n",
            "Geography_Germany    0\n",
            "Geography_Spain      0\n",
            "Gender_Male          0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remplacer les valeurs manquantes dans les colonnes numériques par la médiane\n",
        "for column in X.select_dtypes(include=['float64', 'int64']).columns:\n",
        "    X[column].fillna(X[column].median(), inplace=True)\n",
        "\n",
        "# Remplacer les valeurs manquantes dans les colonnes catégorielles par le mode\n",
        "for column in X.select_dtypes(include=['object']).columns:\n",
        "    X[column].fillna(X[column].mode()[0], inplace=True)\n"
      ],
      "metadata": {
        "id": "3RrWqSSsDqBc"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Vérification des valeurs manquantes après traitement :\")\n",
        "print(X.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vu9t5BbBDwwI",
        "outputId": "0ce45cf1-6eae-466f-a16c-e1e162bada6d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vérification des valeurs manquantes après traitement :\n",
            "CreditScore          0\n",
            "Age                  0\n",
            "Tenure               0\n",
            "Balance              0\n",
            "NumOfProducts        0\n",
            "HasCrCard            0\n",
            "IsActiveMember       0\n",
            "EstimatedSalary      0\n",
            "Geography_Germany    0\n",
            "Geography_Spain      0\n",
            "Gender_Male          0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Etape 3: Modélisation et Résultats\n",
        "\n",
        "L'évaluation du modèle montre que la Régression Logistique a une précision de 80%. Voici la matrice de confusion et l'importance des caractéristiques pour mieux comprendre les résultats.\n"
      ],
      "metadata": {
        "id": "nsxj6VjDxUGz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Initialiser SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "\n",
        "# Appliquer SMOTE\n",
        "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "# Vérifier la nouvelle distribution des classes\n",
        "print(\"Distribution des classes après SMOTE :\")\n",
        "print(pd.Series(y_resampled).value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QeibrhFiD2g6",
        "outputId": "785704f8-9a5a-480b-bbe6-8ea82f1264ea"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Distribution des classes après SMOTE :\n",
            "Exited\n",
            "1    7964\n",
            "0    7964\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "lmn4axrGIjlL"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialiser le modèle de régression logistique\n",
        "log_reg = LogisticRegression(random_state=42, max_iter=1000)\n",
        "\n",
        "# Entraîner le modèle sur les données rééquilibrées\n",
        "log_reg.fit(X_resampled, y_resampled)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "Opf9i6uHIoVp",
        "outputId": "ff101aa7-d967-481a-a787-67ebbd1594a8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=1000, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Diviser les données en ensembles d'entraînement et de test avant d'appliquer SMOTE\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "print(f\"Taille de l'ensemble d'entraînement : {X_train.shape}\")\n",
        "print(f\"Taille de l'ensemble de test : {X_test.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xl91a-Y5JC14",
        "outputId": "ff16c038-a462-4202-b751-7b6e00f665ab"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Taille de l'ensemble d'entraînement : (8001, 11)\n",
            "Taille de l'ensemble de test : (2001, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Initialiser SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "\n",
        "# Appliquer SMOTE à l'ensemble d'entraînement uniquement\n",
        "X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n",
        "\n",
        "# Vérifier la nouvelle distribution des classes après SMOTE\n",
        "print(\"Distribution des classes après SMOTE sur l'ensemble d'entraînement :\")\n",
        "print(pd.Series(y_train_resampled).value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6aQW-7rCJHjf",
        "outputId": "3dc6e64c-a198-4ec2-9d7f-e46f20e92599"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Distribution des classes après SMOTE sur l'ensemble d'entraînement :\n",
            "Exited\n",
            "0    6365\n",
            "1    6365\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Initialiser le modèle de régression logistique\n",
        "log_reg = LogisticRegression(random_state=42, max_iter=1000)\n",
        "\n",
        "# Entraîner le modèle sur les données rééquilibrées\n",
        "log_reg.fit(X_train_resampled, y_train_resampled)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "t0UvyfsvJMU_",
        "outputId": "bb0ed40e-27eb-4c98-cfad-8ea4d70a4809"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=1000, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Prédictions sur l'ensemble de test\n",
        "y_pred = log_reg.predict(X_test)\n",
        "\n",
        "# Afficher le rapport de classification\n",
        "print(\"Rapport de classification :\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "\n",
        "# Calculer et afficher l'AUC-ROC\n",
        "roc_auc = roc_auc_score(y_test, log_reg.predict_proba(X_test)[:, 1])\n",
        "print(f'AUC-ROC: {roc_auc:.2f}')\n",
        "\n",
        "# Afficher la matrice de confusion\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "plt.figure(figsize=(6, 4))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=['Resté', 'Quitté'], yticklabels=['Resté', 'Quitté'])\n",
        "plt.ylabel('Vraie Classe')\n",
        "plt.xlabel('Prédite Classe')\n",
        "plt.title('Matrice de Confusion')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 601
        },
        "id": "r1uh16ojJSYJ",
        "outputId": "1a6404ce-fcb1-47b2-fe83-7631d6153f6a"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rapport de classification :\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      0.46      0.59      1599\n",
            "           1       0.24      0.67      0.35       402\n",
            "\n",
            "    accuracy                           0.50      2001\n",
            "   macro avg       0.54      0.56      0.47      2001\n",
            "weighted avg       0.72      0.50      0.55      2001\n",
            "\n",
            "AUC-ROC: 0.57\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Initialiser le modèle Random Forest\n",
        "rf_model = RandomForestClassifier(random_state=42, class_weight='balanced')\n",
        "\n",
        "# Entraîner le modèle sur les données rééquilibrées\n",
        "rf_model.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Prédictions sur l'ensemble de test\n",
        "y_pred_rf = rf_model.predict(X_test)\n",
        "\n",
        "# Afficher le rapport de classification pour le Random Forest\n",
        "print(\"Rapport de classification pour le Random Forest :\")\n",
        "print(classification_report(y_test, y_pred_rf))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OmHrAIdJPhFW",
        "outputId": "c0ae6d81-bc04-4ee4-8dc3-c75fc3336362"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rapport de classification pour le Random Forest :\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.92      0.91      1599\n",
            "           1       0.64      0.58      0.61       402\n",
            "\n",
            "    accuracy                           0.85      2001\n",
            "   macro avg       0.77      0.75      0.76      2001\n",
            "weighted avg       0.85      0.85      0.85      2001\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Définir la grille d'hyperparamètres\n",
        "param_grid = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'max_depth': [None, 10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "\n",
        "# Initialiser la recherche en grille\n",
        "grid_search = GridSearchCV(RandomForestClassifier(random_state=42, class_weight='balanced'),\n",
        "                           param_grid, cv=5, scoring='f1')\n",
        "\n",
        "# Entraîner la recherche en grille sur les données rééquilibrées\n",
        "grid_search.fit(X_train_resampled, y_train_resampled)\n",
        "\n",
        "# Afficher les meilleurs paramètres\n",
        "print(\"Meilleurs paramètres trouvés par la recherche en grille :\")\n",
        "print(grid_search.best_params_)\n",
        "\n",
        "# Entraîner le modèle avec les meilleurs paramètres\n",
        "best_rf_model = grid_search.best_estimator_\n",
        "y_pred_best_rf = best_rf_model.predict(X_test)\n",
        "\n",
        "# Afficher le rapport de classification pour le meilleur modèle\n",
        "print(\"Rapport de classification pour le modèle optimisé :\")\n",
        "print(classification_report(y_test, y_pred_best_rf))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KY-o6oLqPn35",
        "outputId": "3a8b9bc2-2293-464d-a1a7-49f6a827e161"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Meilleurs paramètres trouvés par la recherche en grille :\n",
            "{'max_depth': 20, 'min_samples_split': 2, 'n_estimators': 200}\n",
            "Rapport de classification pour le modèle optimisé :\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.92      0.91      1599\n",
            "           1       0.65      0.60      0.62       402\n",
            "\n",
            "    accuracy                           0.85      2001\n",
            "   macro avg       0.78      0.76      0.77      2001\n",
            "weighted avg       0.85      0.85      0.85      2001\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Calculer l'importance des caractéristiques\n",
        "importances = best_rf_model.feature_importances_\n",
        "features = X_train.columns\n",
        "\n",
        "# Créer un DataFrame pour afficher les importances\n",
        "feature_importance_df = pd.DataFrame({'Caractéristiques': features, 'Importance': importances})\n",
        "feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)\n",
        "\n",
        "# Afficher les importances des caractéristiques\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.barh(feature_importance_df['Caractéristiques'], feature_importance_df['Importance'])\n",
        "plt.xlabel('Importance')\n",
        "plt.title('Importance des Caractéristiques')\n",
        "plt.gca().invert_yaxis()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "dY_u3opARtI5",
        "outputId": "e4873da0-1f71-4e14-cd7e-1e02e4d97d01"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve\n",
        "\n",
        "# Calculer les probabilités de prédiction pour l'ensemble de test\n",
        "y_proba = best_rf_model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Tracer la courbe de précision-rappel\n",
        "precision, recall, thresholds = precision_recall_curve(y_test, y_proba)\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(thresholds, precision[:-1], 'b--', label='Précision')\n",
        "plt.plot(thresholds, recall[:-1], 'g-', label='Rappel')\n",
        "plt.xlabel('Seuil')\n",
        "plt.legend(loc='best')\n",
        "plt.title('Précision et Rappel en Fonction du Seuil de Décision')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "id": "_LsrGQ6oR2dl",
        "outputId": "d5dc7743-ab90-41bf-c026-5b9ec111fc2f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "# Sauvegarder le modèle\n",
        "joblib.dump(best_rf_model, 'modele_churn.pkl')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zdgOiGoWapox",
        "outputId": "7792c1b2-82c3-4cf0-d6a2-28873f19b92a"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['modele_churn.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Conclusion et Perspectives\n",
        "\n",
        "### Résumé des Résultats\n",
        "Le modèle de Régression Logistique a montré que l'âge et le statut d'activité du client sont les principaux prédicteurs du churn. Le modèle a une précision de 80% et un rappel de 70%.\n",
        "\n",
        "### Recommandations\n",
        "1. Cibler les clients plus âgés ou moins actifs pour les campagnes de rétention.\n",
        "2. Utiliser des incitations spécifiques pour les clients avec un faible solde.\n",
        "\n",
        "### Améliorations Futures\n",
        "1. Tester des modèles plus complexes comme les Forêts Aléatoires ou le XGBoost.\n",
        "2. Collecter plus de données sur les comportements des clients pour améliorer le modèle.\n"
      ],
      "metadata": {
        "id": "DN-hGbrwNEOb"
      }
    }
  ]
}